name: build

on: [push, pull_request]

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: windows-latest
    steps:
     - uses: actions/checkout@master
     - name: Install Rust
       run: rustup update stable
     - name: Set Rust Default Toolchain
       run: rustup default stable
     - name: Install Rustfmt
       run: rustup component add rustfmt
     - run: cargo fmt -- --check
  
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        toolchain: [stable, beta, nightly]
        ttype: [Test, Lint, Deploy]
        os: [windows-latest, ubuntu-latest]
        exclude:
          - toolchain: beta
            ttype: 'Lint'
          - toolchain: nightly
            ttype: 'Lint'
          - toolchain: beta
            ttype: 'Deploy'
          - toolchain: nightly
            ttype: 'Deploy'
          - os: macOS-latest
            ttype: lint
          - os: windows-latest
            ttype: lint
          - os: windows-latest
            toolchain: beta
          - os: windows-latest
            toolchain: nightly
          - os: macOS-latest
            toolchain: beta
          - os: macOS-latest
            toolchain: nightly           
    steps:
     # install Rust
     - uses: actions/checkout@master
     - name: Install Rust
       run: rustup update ${{ matrix.toolchain }}
     - name: Set Rust Default Toolchain
       run: rustup default ${{ matrix.toolchain }}
       if: success()
     
     # install QT
     - name: Install Qt (Windows)
       if: matrix.os == 'windows-latest'
       uses: jurplel/install-qt-action@v2
     - name: Install Qt (Linux)
       if: matrix.os == 'ubuntu-latest'
       run: sudo apt install qt5-default
     - name: Install Qt (MacOS)
       if: matrix.os == 'macOS-latest'
       run: brew install qt5
     
     # install MSVC if we're using Windows
     - name: Install MSVC Build Tools (Windows)
       if: matrix.os == 'windows-latest'
       uses: ilammy/msvc-dev-cmd@v1
   
     # install LLVM
     - name: Install LLVM (Linux)
       if: matrix.os == 'ubuntu-latest'
       run: sudo apt install llvm
     - name: Install LLVM (Windows)
       if: matrix.os == 'windows-latest'
       shell: powershell
       run: |
         Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
         scoop install llvm --global
         gci env:* | ForEach-Object { Write-Output ("::set-env name=" + $_.name + "::" + $_.value) }
         Write-Output ("::set-env name=LIBCLANG_PATH::C:\ProgramData\scoop\apps\llvm\current\lib")
     - name: Install LLVM (MacOS)
       if: matrix.os == 'macOS-latest'
       run: brew install llvm

         
     
     # install clippy
     - name: Install Clippy
       if: matrix.ttype == 'Lint'
       run: rustup component add clippy
       
     # actual tests to be run
     - run: cargo test
       if: matrix.ttype == 'Test' && success()
     - run: cargo clippy
       if: matrix.ttype == 'Lint'
     - run: cargo build --release
       if: matrix.ttype == 'Deploy' && github.event_name == 'push'
